install.packages(mcgv)
install.packages(mgcv)
library(mgcv)
install.packages(c("devtools", "doParallel", "e1071", "gridExtra", "LiblineaR", "psych", "R.matlab", "R.utils", "reshape", "visreg"))
library(itsadug)
install.packages("itsadug")
library(itsadug)
library(itsadug)
#load packages
library(devtools)
# install the newest version from itsadug:
devtools::install_github("vr-vr/itsadug", build_vignettes=TRUE)
Rtools
#load packages
library(devtools)
# install the newest version from itsadug:
devtools::install_github("vr-vr/itsadug", build_vignettes=TRUE)
library(itsadug)
data(simcat)
data(simdat)
help(simdat)
```{r}
data(simdat)
head(simdat)
help(simdat)
head(simdat)
contrasts(simdat$Group)
simdat$Group <- as.factor(simdat$Group)
contrasts(simdat$Group)
#make a predictor as factor
simdat$Group <- as.factor(simdat$Group)
contrasts(simdat$Group)
# change reference level to adults as reference:
simdat$Group <- relevel(simdat$Group, ref = 'Adults')
#contrasts
contrasts(simdat$Group)
#look at summary:
summary(m.factor)
#run model
m.factor <- bam(Y~Group + s(Time, by = Group), data = simdat)
#look at summary:
summary(m.factor)
data(simdat)
head(simdat)
help(simdat)
nrow(simdat)
m.factor <- bam(Y~Group + s(Time, by = Group), data = simdat)
#look at summary:
summary(m.factor)
# interactions grouped by factors
# include intercept difference:
gm1 <- bam(Y ~ Group+s(Time by = Group))
# interactions grouped by factors
# include intercept difference:
gm1 <- bam(Y ~ Group+s(Time ,by = Group))
#make a predictor as factor
simdat$Group <- as.factor(simdat$Group)
contrasts(simdat$Group)
# change reference level to adults as reference:
simdat$Group <- relevel(simdat$Group, ref = 'Adults')
#contrasts
contrasts(simdat$Group)
#run model
m.factor <- bam(Y~Group + s(Time, by = Group), data = simdat)
#look at summary:
summary(m.factor)
#Inspect contrasts
contrasts(simdat$OFGRoup)
# example for ordered factor
simdat$OFGroup <- as.factor(simdat$Group)
#change to ordered factor
simdat$OFGroup <- as.ordered(simdat$OFGroup)
#change contrast to treatment coding
contrasts(simdat$OFGroup) <- 'contr.treatment'
#Inspect contrasts
contrasts(simdat$OFGRoup)
# example for ordered factor
simdat$OFGroup <- as.factor(simdat$Group)
#change to ordered factor
simdat$OFGroup <- as.ordered(simdat$OFGroup)
#change contrast to treatment coding
contrasts(simdat$OFGroup) <- 'contr.treatment'
#Inspect contrasts
contrasts(simdat$OFGroup)
#run model
m.orderedfactor <- bam(Y~OFGroup + s(Time) + s(Time, by = OFGroup), data = simdat)
#inspect summary
summary(m.orderedfactor)
#for binary factors
simdat$IsChildren <- with(simdat, ifelse(Group=="Children",1,0))
#run model
m.binary <- bam(Y~s(Time)+s(Time, by = IsChildren), data = simdat)
#inspect summary
summary(m.binary)
summary(m1)
#random intercepts
simdat$Subject <- as.factor(simdat$Subject)
# run model with random intercept
m1 <- bam(Y ~ Group+s(Time, by = Group) + s(Subject,bs="re"), data = simdat)
summary(m1)
plot(m1,select = 3)
plot_smooth(m1, view = "Time", cond = list(Group="Adults",Subject="a18"), add = TRUE, col = "blue")
par(mfrow = c(1,2),cex = 1.1)
#summed effects without random effects
#intercept + s(Time):GroupAdults
plot_smooth(m1, view = "Time", cond = list(Group="Adults"),rm.ranef=TRUE, main="intercept+s(Time):GroupAdults", rug = FALSE)
plot_smooth(m1,view="Time", cond = list(Group"Adults",Subject="a01"),
par(mfrow = c(1,2),cex = 1.1)
#summed effects without random effects
#intercept + s(Time):GroupAdults
plot_smooth(m1, view = "Time", cond = list(Group="Adults"),rm.ranef=TRUE, main="intercept+s(Time):GroupAdults", rug = FALSE)
plot_smooth(m1,view="Time", cond = list(Group="Adults",Subject="a01"),
main = "... + s(Subject)", col = "red", ylim = c(-15,20), rug = FALSE)
plot_smooth(m1, view = "Time", cond = list(Group="Adults",Subject="a18"), add = TRUE, col = "blue")
#random slope
#subject is a factor
simdat$Subject <- as.factor(simdat$Subject)
#model with random intercept:
m2 <- bam(Y~Group+s(Time, by = Group)+s(Subject,Time bs = "re"), data = simdat)
#model with random intercept:
m2 <- bam(Y~Group+s(Time, by = Group)+s(Subject,Time, bs = "re"), data = simdat)
summary(m2)
# plot
par(mfrow = c(1,2), cex = 1.1)
#summed effects without random effects:
# Intercept + s(Time):GroupAdults
plot_smooth(m2, view="Time", cond = list(Group="Adults"),rm.randef = TRUE, main = "intercept+s(Time):GroupAdults",rug = FALSE)
#Plot summed affects for Subject "a01":
plot_smooth(m2, view = "Time", cond = list(Group="Adults",Subject = "a01"), main = "... + s(Subject)", col = "red", ylim = c(-15,20), rug = FALSE)
#Add Subject "a04"
plot_smooth(m2, view="Time", cond = list(Group="Adults", Subject = "a18"), add = TRUE, col = "blue")
# plot
par(mfrow = c(1,2), cex = 1.1)
#summed effects without random effects:
# Intercept + s(Time):GroupAdults
plot_smooth(m2, view="Time", cond = list(Group="Adults"),rm.ranef = TRUE, main = "intercept+s(Time):GroupAdults",rug = FALSE)
#Plot summed affects for Subject "a01":
plot_smooth(m2, view = "Time", cond = list(Group="Adults",Subject = "a01"), main = "... + s(Subject)", col = "red", ylim = c(-15,20), rug = FALSE)
#Add Subject "a04"
plot_smooth(m2, view="Time", cond = list(Group="Adults", Subject = "a18"), add = TRUE, col = "blue")
# plot
par(mfrow = c(1,2), cex = 1.1)
#summed effects without random effects:
# Intercept + s(Time):GroupAdults
plot_smooth(m2, view="Time", cond = list(Group="Adults"),rm.ranef = TRUE, main = "intercept+s(Time):GroupAdults",rug = FALSE)
#Plot summed affects for Subject "a01":
plot_smooth(m2, view = "Time", cond = list(Group="Adults",Subject = "a01"), main = "... + s(Subject)", col = "red", ylim = c(-15,20), rug = TRUE)
#Add Subject "a04"
plot_smooth(m2, view="Time", cond = list(Group="Adults", Subject = "a18"), add = TRUE, col = "blue")
#random intercept AND slope
simdat$Subject <- as.factor(simdat$Subject)
#model
m3 <- bam(Y ~ Group + s(Time, by=Group)+s(Subject,bs = "re")+s(Subject,Time,bs="re"), data = simdat)
summary(m3)
load("C:/Users/CLARAQ~1/AppData/Local/Temp/SDEC_eeg_classified_rej2_allclasses.rda")
View(SDEC_eeg)
View(SDEC_eeg)
names(SDEC_eeg)
head(SDEC_eeg$direction_w_F2)
head(SDEC_eeg$F2)
##### show some VEPs ######
#
channels_to_plot <- c("I5", "I3", "O1", "Oz", "O2", "I4", "I6", "Iz", "SIz",
"PO7", "PO3", "POz", "PO4", "PO8")
channels_to_plot <- c("O1", "Oz", "O2")
# transform to long format
SDEC_eeg_long <- melt(data = SDEC_eeg[SDEC_eeg$time_sac_off>=(-50), ],
id.vars = c("ID", "subj", "start_left_f", "streak_present_f", "move_direction_f",
"time_stim_off_bins", "time_sac_off_bins"),
measure.vars = channels_to_plot, # or: signal_cols for all channels. RAM Warning!
variable.name = "channel", value.name = "mV")
# load important packages
library(reshape)
# transform to long format
SDEC_eeg_long <- melt(data = SDEC_eeg[SDEC_eeg$time_sac_off>=(-50), ],
id.vars = c("ID", "subj", "start_left_f", "streak_present_f", "move_direction_f",
"time_stim_off_bins", "time_sac_off_bins"),
measure.vars = channels_to_plot, # or: signal_cols for all channels. RAM Warning!
variable.name = "channel", value.name = "mV")
str(SDEC_eeg_long)
table(SDEC_eeg_long$subj)
# baseline correction
SDEC_eeg_long[time_sac_off_bins<10, baseline_mean := mean(mV),
by = .(ID, channel)]
SDEC_eeg_long[ , mV_bc := mV - median(baseline_mean, na.rm = TRUE), by = .(ID, channel)]
SDEC_eeg_long[ , mV_bc := mV - median(baseline_mean, na.rm = TRUE), by = (ID, channel)]
ggplot(SDEC_eeg_long[time_sac_off_bins==0], aes(x = 1:length(mV_bc), y = mV_bc,
color = streak_present_f,
shape = start_left_f)) +
geom_point() + theme_classic() + geom_hline(yintercept = 0, linetype = "dotted")
librar(ggplot)=
1
library(ggplot2)
ggplot(SDEC_eeg_long[time_sac_off_bins==0], aes(x = 1:length(mV_bc), y = mV_bc,
color = streak_present_f,
shape = start_left_f)) +
geom_point() + theme_classic() + geom_hline(yintercept = 0, linetype = "dotted")
SDEC_eeg_long$time_sac_off_bins
SDEC_eeg_long[time_sac_off_bins==0]
SDEC_eeg_long[ehich(time_sac_off_bins==0)]
SDEC_eeg_long[which(time_sac_off_bins==0)]
SDEC_eeg_long[SDEC_eeg_long$time_sac_off_bins==0]
SDEC_eeg_long[,SDEC_eeg_long$time_sac_off_bins==0]
SDEC_eeg_long[SDEC_eeg_long$time_sac_off_bins==0,:]
SDEC_eeg_long[SDEC_eeg_long$time_sac_off_bins==0:]
SDEC_eeg_long[SDEC_eeg_long$time_sac_off_bins==0]
SDEC_eeg_long[SDEC_eeg_long$time_sac_off_bins==0,]
# baseline correction
SDEC_eeg_long[time_sac_off_bins<10, baseline_mean := mean(mV),
by = .(ID, channel)]
eegUtils
library(eegUtils)
library(devtools)
devtools::install_github("craddm/eegUtils")
version(scales)
version
version
library(data.table)
SDEC_eeg <- as.data.table(SDEC_eeg)
SDEC_eeg_long <- as.data.table(SDEC_eeg_long)
# baseline correction
SDEC_eeg_long[time_sac_off_bins<10, baseline_mean := mean(mV),
by = .(ID, channel)]
##### show some VEPs ######
#
channels_to_plot <- c("I5", "I3", "O1", "Oz", "O2", "I4", "I6", "Iz", "SIz",
"PO7", "PO3", "POz", "PO4", "PO8")
channels_to_plot <- c("O1", "Oz", "O2")
# transform to long format
SDEC_eeg_long <- melt(data = SDEC_eeg[SDEC_eeg$time_sac_off>=(-50), ],
id.vars = c("ID", "subj", "start_left_f", "streak_present_f", "move_direction_f",
"time_stim_off_bins", "time_sac_off_bins"),
measure.vars = channels_to_plot, # or: signal_cols for all channels. RAM Warning!
variable.name = "channel", value.name = "mV")
str(SDEC_eeg_long)
table(SDEC_eeg_long$subj)
##### show some VEPs ######
#
channels_to_plot <- c("I5", "I3", "O1", "Oz", "O2", "I4", "I6", "Iz", "SIz",
"PO7", "PO3", "POz", "PO4", "PO8")
channels_to_plot <- c("O1", "Oz", "O2")
# transform to long format
SDEC_eeg_long <- melt(data = SDEC_eeg[SDEC_eeg$time_sac_off>=(-50), ],
id.vars = c("ID", "subj", "start_left_f", "streak_present_f", "move_direction_f",
"time_stim_off_bins", "time_sac_off_bins"),
measure.vars = channels_to_plot, # or: signal_cols for all channels. RAM Warning!
variable.name = "channel", value.name = "mV")
str(SDEC_eeg_long)
table(SDEC_eeg_long$subj)
```{r}
# baseline correction
SDEC_eeg_long[time_sac_off_bins<10, baseline_mean := mean(mV),
by = .(ID, channel)]
SDEC_eeg_long[ , mV_bc := mV - median(baseline_mean, na.rm = TRUE),
by = .(ID, channel)]
ggplot(SDEC_eeg_long[time_sac_off_bins==0], aes(x = 1:length(mV_bc), y = mV_bc,
color = streak_present_f,
shape = start_left_f)) +
geom_point() + theme_classic() + geom_hline(yintercept = 0, linetype = "dotted")
# make aggregate
SDEC_eeg_agg <- SDEC_eeg_long[is.element(channel, channels_to_plot) &
time_sac_off_bins<=300 & time_sac_off_bins>=(-50),
.(M = mean(mV_bc)),
by = .(start_left_f, streak_present_f, move_direction_f,
time_sac_off_bins, channel)]
# mega plot
ggplot(SDEC_eeg_agg,
aes(x = time_sac_off_bins, y = M,
color = streak_present_f) ) +
geom_line() +
theme_classic() +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 0, linetype = "dotted") +
facet_grid(move_direction_f~start_left_f+channel)
# overall ERP
SDEC_eeg_agg_total <- setDT(SDEC_eeg_agg)[ , .(M = mean(M)),
by = .(start_left_f, streak_present_f, move_direction_f, time_sac_off_bins)]
SDEC_eeg_agg_total[time_sac_off_bins<0, baseline_mean := mean(M),
by = .(streak_present_f, start_left_f, move_direction_f)]
SDEC_eeg_agg_total[ , M_bc := M - median(baseline_mean, na.rm = TRUE),
by = .(streak_present_f, start_left_f, move_direction_f)]
ggplot(SDEC_eeg_agg_total,
aes(x = time_sac_off_bins, y = M_bc,
color = streak_present_f) ) +
geom_line() +
theme_classic() +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 0, linetype = "dotted") +
facet_grid(move_direction_f~start_left_f)
data <- read.table('octave_data.txt', sep = )
setwd("~/Projects/2019_Compelled_Movements/CompelledMovements/CMP_Hand/Design")
data <- read.table('octave_data.txt', sep = )
names = c('participant', 'session','block', 'trial', 'effector','goalPos', 'jumpTim',  'jumpPos',  'fixT','alReaT',  'resPos',  't_draw',  't_touched',  't_go',  't_movStart',  't_jump',  't_movEnd',  't_goal', 't_end', 'reaT', 'gapT','processT', 'correct')
colnames(data) <- names
iv_data <- data[which(data$resPos=='NaN'),]
v_data  <- data[which(data$resPos!='NaN'),]
v_data  <- v_data[which(v_data$reaT>0.1),]
head(v_data)
table(v_data$goalPos)
# uniform distribution of jump times
plot(v_data$trial, v_data$jumpTim)
# uniform distribution of jump times
j_times <- ggplot(data = v_data, aes(trial,jumpTim)) +
geom_point(aes(color = block))
library(ggplot2)
# uniform distribution of jump times
j_times <- ggplot(data = v_data, aes(trial,jumpTim)) +
geom_point(aes(color = block))
j_times
# uniform distribution of jump times
j_times <- ggplot(data = v_data, aes(trial,jumpTim)) +
geom_point(aes(color = as.factor(block)))
j_times
# linear correlation between jump times and jump pos
time_pos <- ggplot(data = v_data, aes(jumpTim,jumpPos))+
geom_smooth()
time_pos
# linear correlation between jump times and jump pos
time_pos <- ggplot(data = v_data, aes(jumpTim,jumpPos))+
geom_smooth(method= 'loess', formula = y~x)
time_pos
# extended sanity check
# 1. no difference in reaction time between movments to the left and to the right
tar_left  <- v_data$reaT[which(v_data$goalPos ==1)]
tar_right <- v_data$reaT[which(v_data$goalPos ==2)]
t.test(tar_left,tar_right)
mean(tar_left)
mean(tar_right)
mean(tar_right)
# no dependence of reaction time on block
anova(v_data$reaT ~ v_data$block)
# no dependence of reaction time on block
rea_block <- anova(reaT~block, data = v_data)
# no dependence of reaction time on block
rea_block <- aov(reaT~block, data = v_data)
summay(rea_block)
summary(rea_block)
summary(gap_process)
# dependence of gapT and processT
gap_process <- aov(processT~gapT*reaT, data = v_data)
summary(gap_process)
# dependence of gapT and reaT
gap_rea    <- aov(reaT~gapT, data = v_data)
summary(gap_rea)
# linear correlation between jump times and jump pos
gap_pro_plot <- ggplot(data = v_data, aes(processT,gapT))+
geom_smooth(method= 'loess', formula = y~x)
gap_pro_plot
# linear correlation between jump times and jump pos
gap_pro_plot <- ggplot(data = v_data, aes(gapT,processT))+
geom_smooth(method= 'loess', formula = y~x)
gap_pro_plot
# response is predicted by goal
goal_resp <- aov(resPos ~ goalPos, data=v_data)
summary(goal_resp)
summary(ans_pro)
# correctness of answer is predicted by processing time
ans_pro  <- aov(correct ~ processT, data = v_data)
summary(ans_pro)
# correctness of answer is not predicted by reaction time
ans_rea   <- aov(correct ~ reat, data = v_data)
# correctness of answer is not predicted by reaction time
ans_rea   <- aov(correct ~ reaT, data = v_data)
summary(ans_rea)
# is there an impact of correct/incorrect and the moved time?
ans_mov   <- aov(correct ~ (t_movEnd-t_movStart), data = v_data)
summary(ans_mov)
# is there an impact of correct/incorrect and the moved time?
ans_mov   <- aov(goalPos ~ (t_movEnd-t_movStart), data = v_data)
summary(ans_mov)
# is there an impact of correct/incorrect and the moved time?
ans_mov   <- aov(resPos ~ (t_movEnd-t_movStart), data = v_data)
summary(ans_mov)
mean(v_data$t_movEnd[which(v_data$resPos == 1)]-v_data$t_movStart[which(v_data$resPos == 1)])
mean(v_data$t_movEnd[which(v_data$resPos == 2)]-v_data$t_movStart[which(v_data$resPos == 2)])
mean(v_data$t_movEnd[which(v_data$resPos == 1)]-v_data$t_movStart[which(v_data$resPos == 1)])
mean(v_data$t_movEnd[which(v_data$resPos == 1)]-v_data$t_movStart[which(v_data$resPos == 1)])
mean(v_data$t_movEnd[which(v_data$resPos == 2)]-v_data$t_movStart[which(v_data$resPos == 2)])
data <- read.table('octave_data.txt', sep = )
setwd("~/Projects/2019_Compelled_Movements/CompelledMovements/CMP_Hand/Design")
data <- read.table('octave_data.txt', sep = )
data <- read.table('octave_data.txt', sep = )
data <- read.table('octave_data.txt')
setwd("~/Projects/2019_Compelled_Movements/CompelledMovements/CMP_Hand/Design")
getwd()
ls()
ls(getwd())
data <- read.table('octave_data.txt')
dir.exists('octave_data.txt')
dir.exists('ck10_CMP_Hand.mat')
list.files(path = '.')
to_read <- list.files(path = '.')(14)
to_read <- list.files(path = '.')[14]
data <- read.table(t_read)
data <- read.table(to_read)
names = c('participant', 'session','block', 'trial', 'effector','goalPos', 'jumpTim',  'jumpPos',  'fixT','alReaT',  'resPos',  't_draw',  't_touched',  't_go',  't_movStart',  't_jump',  't_movEnd',  't_goal', 't_end', 'reaT', 'gapT','processT', 'correct')
colnames(data) <- names
iv_data <- data[which(data$resPos=='NaN'),]
v_data  <- data[which(data$resPos!='NaN'),]
v_data  <- v_data[which(v_data$reaT>0.1),]
head(v_data)
# roughly the same number of left and right goals
table(v_data$goalPos)
# uniform distribution of jump times
j_times <- ggplot(data = v_data, aes(trial,jumpTim)) +
geom_point(aes(color = as.factor(block)))
j_times
mean(v_data$t_movEnd[which(v_data$resPos == 1)]-v_data$t_movStart[which(v_data$resPos == 1)])
mean(v_data$t_movEnd[which(v_data$resPos == 2)]-v_data$t_movStart[which(v_data$resPos == 2)])
data <- read.table("octave_data.txt")
data <- read.table("octave_data.txt", sep = '\t')
data <- read.table("octave_data.txt", sep = '\t')
View(data)
data <- read.table("new_octave_data.txt", sep = '\t')
names = c('participant', 'session','block', 'trial', 'effector','goalPos', 'jumpTim',  'jumpPos',  'fixT','alReaT',  'resPos',  't_draw',  't_touched',  't_go',  't_movStart',  't_jump',  't_movEnd',  't_goal', 't_end', 'reaT', 'gapT','processT', 'correct')
colnames(data) <- names
iv_data <- data[which(data$resPos=='NaN'),]
v_data  <- data[which(data$resPos!='NaN'),]
v_data  <- v_data[which(v_data$reaT>0.1),]
head(v_data)
# roughly the same number of left and right goals
table(v_data$goalPos)
# uniform distribution of jump times
j_times <- ggplot(data = v_data, aes(trial,jumpTim)) +
geom_point(aes(color = as.factor(block)))
j_times
# linear correlation between jump times and jump pos
time_pos <- ggplot(data = v_data, aes(jumpTim,jumpPos))+
geom_smooth(method= 'loess', formula = y~x)
time_pos
# response is predicted by goal
goal_resp <- aov(resPos ~ goalPos, data=v_data)
summary(goal_resp)
# extended sanity check
# 1. no difference in reaction time between movments to the left and to the right
tar_left  <- v_data$reaT[which(v_data$goalPos ==1)]
tar_right <- v_data$reaT[which(v_data$goalPos ==2)]
mean(tar_left)
mean(tar_right)
t.test(tar_left,tar_right)
# no dependence of reaction time on block
rea_block <- aov(reaT~block, data = v_data)
summary(rea_block)
# dependence of gapT and processT
gap_process <- aov(processT~gapT*reaT, data = v_data)
summary(gap_process)
# linear correlation between jump times and jump pos
gap_pro_plot <- ggplot(data = v_data, aes(gapT,processT))+
geom_smooth(method= 'loess', formula = y~x)
gap_pro_plot
# dependence of gapT and reaT
gap_rea    <- aov(reaT~gapT, data = v_data)
summary(gap_rea)
# correctness of answer is predicted by processing time
ans_pro  <- aov(correct ~ processT, data = v_data)
summary(ans_pro)
# correctness of answer is not predicted by reaction time
ans_rea   <- aov(correct ~ reaT, data = v_data)
summary(ans_rea)
# is there an impact of correct/incorrect and the moved time?
ans_mov   <- aov(resPos ~ (t_movEnd-t_movStart), data = v_data)
summary(ans_mov)
mean(v_data$t_movEnd[which(v_data$resPos == 1)]-v_data$t_movStart[which(v_data$resPos == 1)])
mean(v_data$t_movEnd[which(v_data$resPos == 2)]-v_data$t_movStart[which(v_data$resPos == 2)])
