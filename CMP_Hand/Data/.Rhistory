y_coord <- reach_trial$y[l]
if(x_coord == y_coord){
merge <- TRUE
} else if (abs(old_x - x_coord)>0.02) {
merge <- TRUE
} else if (abs(old_y - y_coord)>0.02) {
merge <- TRUE
} else if (is.na(y_coord) | is.na(x_coord)){
merge <- TRUE
}
}
if (merge){
step <- 0
nextX <- NA
nextY <- NA
while (any(is.na(c(nextX,nextY)))){
step <- step+1
if (l+step > length(reach_trial$ID)){
nextX <- reach_trial$x[l-1]
nextY <- reach_trial$y[l-1]
} else{
nextX <- reach_trial$x[l+step]
nextY <- reach_trial$y[l+step]
}
if (length(nextY)== 0){
nextX <- reach_trial$x[l-1]
nextY <- reach_trial$y[l-1]
}
if (length(nextX)== 0){
nextX <- reach_trial$x[l-1]
nextY <- reach_trial$y[l-1]
}
}
reach_trial$x[l] <- mean(reach_trial$x[l-1],nextX)
reach_trial$y[l] <- mean(reach_trial$y[l-1],nextY)
}
}
norm_reach      <- reach_trial
norm_reach$x    <- norm_reach$x - zero_x
norm_reach$y    <- norm_reach$y - zero_y
reaches_normalized <- rbind(reaches_normalized,norm_reach)
reaches_cleaned <- rbind(reaches_cleaned,reach_trial)
}
# define axis range
x_range = c(-0.2,0.2)
y_range = c(-0.1, 0.025)
# Define blank theme
fontsize = 9
blanktheme <-  theme_bw() + theme(legend.position="Bottom") +
# Set information about ticks
theme(axis.ticks=element_line(size=0.2358491)) +
theme(axis.ticks.length=unit(0.05,"cm")) +
# Remove all pre-defined lines
theme(panel.grid.major=element_blank()) +
theme(panel.grid.minor=element_blank()) +
theme(panel.background=element_blank()) +
#theme(panel.border=element_blank()) +
theme(plot.background=element_blank()) +
# Determine style of box
theme(axis.line = element_line(color= "black",size=0.2358491)) +	#results in 0.5pt
# Determine font size of axes
theme(text = element_text(size=fontsize)) +
theme(axis.title.y=element_text(vjust=0.3,size=fontsize)) +
theme(axis.title.x=element_text(vjust=0.3,size=fontsize)) +
theme(axis.text.x = element_text(size= fontsize)) +
theme(axis.text.y = element_text(size= fontsize)) +
theme(strip.text.x = element_text(size= fontsize)) +
theme(strip.text.y = element_text(size= fontsize))
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
reaches_normalized$label   <- c(NA)
reaches_normalized$correct <- c(NA)
for (tim in tb){
timeID   <- data$ID[which(data$processT>=tim & data$processT<tim+step)]
reachID  <- which(is.element(reaches_normalized$ID,timeID))
reaches_normalized$label[reachID] <- c(tim)
}
corrID       <- data$ID[which(data$correct == 1)]
correachID   <- which(is.element(reaches_normalized$ID,corrID))
incorrID     <- data$ID[which(data$correct == 0)]
incorreachID <- which(is.element(reaches_normalized$ID,incorrID))
reaches_normalized$correct[correachID]   <- c(unique(data$correct[which(is.element(data$ID,corrID))]))
reaches_normalized$correct[incorreachID] <- c(unique(data$correct[which(is.element(data$ID,incorrID))]))
grit_plot <- ggplot(data = reaches_normalized, aes(x,y))+
geom_point(aes(color=as.factor(correct), alpha = 0.7))+
geom_line(aes(color=as.factor(correct), alpha = 0.7)) +
facet_grid(rows = vars(label), cols = vars(participant))+
blanktheme
grit_plot
mean(data$reaT[which(data$participant=='TR')])
mean(data$reaT[which(data$participant=='ck')])
mean(data$jumpT[which(data$participant=='ck')])
mean(data$jumpT[which(data$participant=='TR')])
summary(data$jumpT[which(data$participant=='TR')])
summary(data$jumpT[which(data$participant=='ck')])
summary(data$t_goal- data$t_go)
summary(data$processT)
low <- min(t_data$processT)
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in data$participant){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
visualize
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
visualize
plot_correct_time <- as.data.frame(visualize)
View(plot_correct_time)
View(plot_correct_time)
plot_percent      <- ggplot(data = plot_correct_time, aes(V1,V2, group = V3))+
geom_line(aes(color = vars(V3)))+
blanktheme
plot_percent
type(plot_correct_time)
class(plot_correct_time)
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
plot_percent      <- ggplot(data = plot_correct_time, aes(V1,V2, group = V3))+
geom_line(aes(color = c(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
plot_percent      <- ggplot(data = plot_correct_time, aes(V1,V2, group = V3))+
geom_smooth(aes(color = c(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_smooth(aes(color = c(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_smooth(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
plot_percent      <- ggplot(data = plot_correct_time, aes(round(V2),round(V1), group = V3))+
geom_smooth(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
plot_percent      <- ggplot(data = plot_correct_time, aes(as.numeric(V2),as.numeric(V1), group = V3))+
geom_smooth(aes(color = as.factor(V3)))+
blanktheme
plot_percent
plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_smooth(aes(color = as.factor(V3)))+
blanktheme
plot_percent
View(plot_correct_time)
View(plot_correct_time)
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
#plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
#plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_point(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
tim = round(tim,3)
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
#plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
#plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_point(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in tb){
tim <- round(tim,3)
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
#plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
#plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_point(aes(color = as.factor(V3)))+
blanktheme
plot_percent
tb
round(tb, 3)
round(tb, 2)
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in round(tb,3)){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- sum(answ)/length(answ)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
#plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
#plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_point(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- NULL
for (tim in round(tb,3)){
for (par in unique(data$participant)){
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- round(sum(answ)/length(answ),2)
out <- c(percent,tim,par)
visualize <- rbind(visualize,out)
}
}
plot_correct_time <- as.data.frame(visualize)
#plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
#plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_point(aes(color = as.factor(V3)))+
blanktheme
plot_percent
class(visualize[1,])
class(visualize[,1])
class(visualize[1,1])
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- matrix(ncol = 3, nrow = length(tb)*length(unique(data$participant)))
line <- 0
for (tim in round(tb,3)){
for (par in unique(data$participant)){
line <- line+1
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- round(sum(answ)/length(answ),2)
visualize[line,1] <- percent
visualize[line,2] <- tim
visualize[line,3] <- part
}
}
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- matrix(ncol = 3, nrow = length(tb)*length(unique(data$participant)))
line <- 0
for (tim in round(tb,3)){
for (par in unique(data$participant)){
line <- line+1
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- round(sum(answ)/length(answ),2)
visualize[line,1] <- percent
visualize[line,2] <- tim
visualize[line,3] <- par
}
}
plot_correct_time <- as.data.frame(visualize)
#plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
#plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_line(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- matrix(ncol = 3, nrow = length(tb)*length(unique(data$participant)))
line <- 0
for (tim in round(tb,3)){
for (par in unique(data$participant)){
line <- line+1
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- round(sum(answ)/length(answ),2)
visualize[line,1] <- percent
visualize[line,2] <- tim
visualize[line,3] <- par
}
}
plot_correct_time <- as.data.frame(visualize)
plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_line(aes(color = as.factor(V3)))+
blanktheme
plot_percent
View(visualize)
View(visualize)
class[1,1]
class(visualize[1,1])
df <- as.data.frame(visualize)
class(df$V1[1])
df <- as.data.frame(visualize, stringsAsFactors = FALSE)
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- matrix(ncol = 3, nrow = length(tb)*length(unique(data$participant)))
line <- 0
for (tim in round(tb,3)){
for (par in unique(data$participant)){
line <- line+1
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- round(sum(answ)/length(answ),2)
visualize[line,1] <- percent
visualize[line,2] <- tim
visualize[line,3] <- par
}
}
plot_correct_time <- as.data.frame(visualize, stringsAsFactors = FALSE)
plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_line(aes(color = as.factor(V3)))+
blanktheme
plot_percent
low <- min(data$processT)
high<- max(data$processT)
step<- 0.05
tb  <- seq(low, high, by = step)
visualize <- matrix(ncol = 3, nrow = length(tb)*length(unique(data$participant)))
line <- 0
for (tim in round(tb,3)){
for (par in unique(data$participant)){
line <- line+1
t_data <- data[which(data$participant==par),]
timeidx   <- which(t_data$processT>=tim & t_data$processT<tim+step)
answ      <- t_data$correct[timeidx]
percent   <- round(sum(answ)/length(answ),2)
visualize[line,1] <- percent
visualize[line,2] <- tim
visualize[line,3] <- par
}
}
plot_correct_time <- as.data.frame(visualize, stringsAsFactors = FALSE)
plot_correct_time$V1 <- as.numeric(plot_correct_time$V1)
plot_correct_time$V2 <- as.numeric(plot_correct_time$V2)
plot_percent      <- ggplot(data = plot_correct_time, aes(V2,V1, group = V3))+
geom_smooth(aes(color = as.factor(V3)))+
blanktheme
plot_percent
